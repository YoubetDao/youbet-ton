;;
;; Header files for Bet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_uint_uint
(cell, ()) __tact_dict_set_uint_uint(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_uint_uint
int __tact_dict_get_uint_uint(cell d, int kl, int k, int vl) inline;

;; __tact_dict_min_uint_uint
(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl) inline;

;; __tact_dict_next_uint_uint
(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_uint_cell
cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline;

;; __tact_dict_min_uint_cell
(int, cell, int) __tact_dict_min_uint_cell(cell d, int kl) inline;

;; __tact_dict_next_uint_cell
(int, cell, int) __tact_dict_next_uint_cell(cell d, int kl, int pivot) inline;

;; __tact_dict_set_uint_slice
(cell, ()) __tact_dict_set_uint_slice(cell d, int kl, int k, slice v) inline;

;; __tact_dict_get_uint_slice
slice __tact_dict_get_uint_slice(cell d, int kl, int k) inline;

;; __tact_dict_min_uint_slice
(int, slice, int) __tact_dict_min_uint_slice(cell d, int kl) inline;

;; __tact_dict_next_uint_slice
(int, slice, int) __tact_dict_next_uint_slice(cell d, int kl, int pivot) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_set_slice_uint
(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_uint
int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Goal$_store
builder $Goal$_store(builder build_0, (int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell) v) inline_ref;

;; $Goal$_store_cell
cell $Goal$_store_cell((int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell) v) inline;

;; $Goal$_load
(slice, ((int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell))) $Goal$_load(slice sc_0) inline_ref;

;; $Goal$_as_optional
tuple $Goal$_as_optional((int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell) v) inline;

;; $Goal$_load_opt
tuple $Goal$_load_opt(cell cl) inline;

;; $GoalInfo$_store
builder $GoalInfo$_store(builder build_0, (int, slice, slice, int, slice, int, cell, int) v) inline_ref;

;; $GoalInfo$_store_cell
cell $GoalInfo$_store_cell((int, slice, slice, int, slice, int, cell, int) v) inline;

;; $Task$_store
builder $Task$_store(builder build_0, (slice, slice, int, slice, slice) v) inline;

;; $Task$_store_cell
cell $Task$_store_cell((slice, slice, int, slice, slice) v) inline;

;; $Task$_load
(slice, ((slice, slice, int, slice, slice))) $Task$_load(slice sc_0) inline;

;; $Task$_as_optional
tuple $Task$_as_optional((slice, slice, int, slice, slice) v) inline;

;; $Task$_load_opt
tuple $Task$_load_opt(cell cl) inline;

;; $Project$_store
builder $Project$_store(builder build_0, (slice, cell, cell, int) v) inline;

;; $Project$_store_cell
cell $Project$_store_cell((slice, cell, cell, int) v) inline;

;; $Project$_load
(slice, ((slice, cell, cell, int))) $Project$_load(slice sc_0) inline;

;; $Project$_as_optional
tuple $Project$_as_optional((slice, cell, cell, int) v) inline;

;; $Project$_load_opt
tuple $Project$_load_opt(cell cl) inline;

;; $UserGoals$_store
builder $UserGoals$_store(builder build_0, (slice, cell, int) v) inline;

;; $UserGoals$_store_cell
cell $UserGoals$_store_cell((slice, cell, int) v) inline;

;; $UserGoals$_load
(slice, ((slice, cell, int))) $UserGoals$_load(slice sc_0) inline;

;; $UserGoals$_as_optional
tuple $UserGoals$_as_optional((slice, cell, int) v) inline;

;; $UserGoals$_load_opt
tuple $UserGoals$_load_opt(cell cl) inline;

;; $CompletedTasks$_store
builder $CompletedTasks$_store(builder build_0, (slice, cell, int) v) inline;

;; $CompletedTasks$_store_cell
cell $CompletedTasks$_store_cell((slice, cell, int) v) inline;

;; $CompletedTasks$_load
(slice, ((slice, cell, int))) $CompletedTasks$_load(slice sc_0) inline;

;; $CompletedTasks$_as_optional
tuple $CompletedTasks$_as_optional((slice, cell, int) v) inline;

;; $CompletedTasks$_load_opt
tuple $CompletedTasks$_load_opt(cell cl) inline;

;; $GithubUser$_store
builder $GithubUser$_store(builder build_0, (slice) v) inline;

;; $GithubUser$_store_cell
cell $GithubUser$_store_cell((slice) v) inline;

;; $GithubUser$_load
(slice, ((slice))) $GithubUser$_load(slice sc_0) inline;

;; $GithubUser$_as_optional
tuple $GithubUser$_as_optional((slice) v) inline;

;; $GithubUser$_load_opt
tuple $GithubUser$_load_opt(cell cl) inline;

;; $LinkWallet$_load
(slice, ((slice, slice))) $LinkWallet$_load(slice sc_0) inline;

;; $CreateGoal$_load
(slice, ((int, slice, slice, int, int))) $CreateGoal$_load(slice sc_0) inline;

;; $StakeAndUnlockGoal$_load
(slice, ((int))) $StakeAndUnlockGoal$_load(slice sc_0) inline;

;; $ConfirmTaskCompletion$_load
(slice, ((int, slice))) $ConfirmTaskCompletion$_load(slice sc_0) inline;

;; $ClaimStake$_load
(slice, ((int))) $ClaimStake$_load(slice sc_0) inline;

;; $SettleGoal$_load
(slice, ((int))) $SettleGoal$_load(slice sc_0) inline;

;; $CreateProject$_load
(slice, ((slice, slice))) $CreateProject$_load(slice sc_0) inline;

;; $CreateTask$_load
(slice, ((slice, slice, slice))) $CreateTask$_load(slice sc_0) inline;

;; $ConfirmTask$_load
(slice, ((slice, slice, int))) $ConfirmTask$_load(slice sc_0) inline;

;; $DonateToProject$_load
(slice, ((slice, int))) $DonateToProject$_load(slice sc_0) inline;

;; $ClaimReward$_load
(slice, ((slice))) $ClaimReward$_load(slice sc_0) inline;

;; $Bet$_store
builder $Bet$_store(builder build_0, (slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) v) inline;

;; $Bet$_load
(slice, ((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell))) $Bet$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Goal$_not_null
((int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell)) $Goal$_not_null(tuple v) inline;

;; $GoalInfo$_to_external
(int, slice, slice, int, slice, int, cell, int) $GoalInfo$_to_external(((int, slice, slice, int, slice, int, cell, int)) v) inline;

;; $Task$_not_null
((slice, slice, int, slice, slice)) $Task$_not_null(tuple v) inline;

;; $Project$_not_null
((slice, cell, cell, int)) $Project$_not_null(tuple v) inline;

;; $UserGoals$_get_goals
_ $UserGoals$_get_goals((slice, cell, int) v) inline;

;; $UserGoals$_not_null
((slice, cell, int)) $UserGoals$_not_null(tuple v) inline;

;; $CompletedTasks$_get_tasks
_ $CompletedTasks$_get_tasks((slice, cell, int) v) inline;

;; $CompletedTasks$_not_null
((slice, cell, int)) $CompletedTasks$_not_null(tuple v) inline;

;; $GithubUser$_get_githubUsername
_ $GithubUser$_get_githubUsername((slice) v) inline;

;; $GithubUser$_not_null
((slice)) $GithubUser$_not_null(tuple v) inline;

;; $Bet$init$_load
(slice, ((slice))) $Bet$init$_load(slice sc_0) inline;

;; $Bet$_contract_init
(slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $Bet$_contract_init(slice $owner) impure inline_ref;

;; $Bet$_contract_load
(slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $Bet$_contract_load() impure inline_ref;

;; $Bet$_contract_store
() $Bet$_contract_store((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) v) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Bet$_fun_walletToGithub
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_walletToGithub((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self) impure inline_ref;

;; $Goal$_constructor_id_name_description_requiredStake_taskCount_goalType_creator_completed_participants_participantsCount_isParticipant_isClaimed_completedTaskCount_rewards
((int, slice, slice, int, slice, int, cell, int, int, int, cell, cell, cell, cell)) $Goal$_constructor_id_name_description_requiredStake_taskCount_goalType_creator_completed_participants_participantsCount_isParticipant_isClaimed_completedTaskCount_rewards(int $id, slice $name, slice $description, int $requiredStake, int $taskCount, int $goalType, slice $creator, int $completed, cell $participants, int $participantsCount, cell $isParticipant, cell $isClaimed, cell $completedTaskCount, cell $rewards) inline;

;; $Bet$_fun_createGoalFunc
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_createGoalFunc((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $name, slice $description, int $requiredStake, int $taskCount, int $goalType) impure inline_ref;

;; $Bet$_fun_createGoalSolo
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_createGoalSolo((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $name, slice $description, int $requiredStake, int $taskCount) impure inline_ref;

;; $Bet$_fun_createGoal
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_createGoal((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $name, slice $description, int $requiredStake, int $taskCount) impure inline_ref;

;; $GithubUser$_constructor_githubUsername
((slice)) $GithubUser$_constructor_githubUsername(slice $githubUsername) inline;

;; $Bet$_fun_linkWallet
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_linkWallet((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $address, slice $github) impure inline_ref;

;; $UserGoals$_constructor_address_goals_goalsLen
((slice, cell, int)) $UserGoals$_constructor_address_goals_goalsLen(slice $address, cell $goals, int $goalsLen) inline;

;; $Bet$_fun_stakeAndUnlockGoal
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_stakeAndUnlockGoal((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, int $goalId) impure inline_ref;

;; $Bet$_fun_confirmTaskCompletion
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_confirmTaskCompletion((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, int $goalId, slice $user) impure inline_ref;

;; $SendParameters$_constructor_to_value
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value(slice $to, int $value) inline;

;; $Bet$_fun_claimStake
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_claimStake((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, int $goalId) impure inline_ref;

;; $Bet$_fun_settleGoal
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_settleGoal((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, int $goalId) impure inline_ref;

;; $GoalInfo$_constructor_id_name_description_requiredStake_creator_completed_participants_goalType
((int, slice, slice, int, slice, int, cell, int)) $GoalInfo$_constructor_id_name_description_requiredStake_creator_completed_participants_goalType(int $id, slice $name, slice $description, int $requiredStake, slice $creator, int $completed, cell $participants, int $goalType) inline;

;; $Bet$_fun_allGoals
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_allGoals((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self) impure inline_ref;

;; $Bet$_fun_userGoals
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_userGoals((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $address) impure inline_ref;

;; $Bet$_fun_goalDetails
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), (int, slice, slice, int, slice, int, cell, int)) $Bet$_fun_goalDetails((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, int $goalId) impure inline_ref;

;; $Bet$_fun_allTasks
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_allTasks((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self) impure inline_ref;

;; $Bet$_fun_unconfirmedTasks
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_unconfirmedTasks((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self) impure inline_ref;

;; $Project$_constructor_id_userPoints_participants_participantsCount
((slice, cell, cell, int)) $Project$_constructor_id_userPoints_participants_participantsCount(slice $id, cell $userPoints, cell $participants, int $participantsCount) inline;

;; $Bet$_fun_createProject
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_createProject((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $projectId, slice $name) impure inline_ref;

;; $Task$_constructor_id_name_completed_projectId_taskCompleter
((slice, slice, int, slice, slice)) $Task$_constructor_id_name_completed_projectId_taskCompleter(slice $id, slice $name, int $completed, slice $projectId, slice $taskCompleter) inline;

;; $Bet$_fun_createTask
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_createTask((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $id, slice $name, slice $projectId) impure inline_ref;

;; $Bet$_fun_confirmTask
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_confirmTask((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $taskId, slice $github, int $taskPoints) impure inline_ref;

;; $Bet$_fun_donateToProject
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_donateToProject((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $projectId, int $amount) impure inline_ref;

;; $Bet$_fun_allProjectIds
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_allProjectIds((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self) impure inline_ref;

;; $Bet$_fun_projectParticipants
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_projectParticipants((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $projectId) impure inline_ref;

;; $Bet$_fun_projectUserPoints
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), int) $Bet$_fun_projectUserPoints((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $projectId, slice $user) impure inline_ref;

;; $Bet$_fun_claimReward
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_claimReward((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $projectId) impure inline_ref;

;; $Bet$_fun_totalRewards
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), int) $Bet$_fun_totalRewards((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $user) impure inline_ref;

;; $Bet$_fun_claimedRewards
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), int) $Bet$_fun_claimedRewards((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $user) impure inline_ref;

;; $Bet$_fun_userPoints
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), int) $Bet$_fun_userPoints((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $user) impure inline_ref;

;; $Bet$_fun_userCompletedTasks
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), cell) $Bet$_fun_userCompletedTasks((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $user) impure inline_ref;

;; $Bet$_fun_githubByWallet
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), slice) $Bet$_fun_githubByWallet((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $wallet) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Bet$_fun_forward
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_forward((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Bet$_fun_notify
((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell), ()) $Bet$_fun_notify((slice, cell, int, cell, int, cell, cell, cell, cell, cell, cell, cell, cell, int, cell, cell) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
